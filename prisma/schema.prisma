generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  description    String?         @db.Text
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  employees      Employee[]
  schedules      Schedule[]
  shiftTemplates ShiftTemplate[]
  users          User[]

  @@map("organizations")
}

model User {
  id                  Int                  @id @default(autoincrement())
  username            String               @unique @db.VarChar(100)
  passwordHash        String               @map("password_hash") @db.VarChar(255)
  email               String?              @db.VarChar(255)
  role                UserRole             @default(MANAGER)
  organizationId      Int?                 @map("organization_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  approvedPreferences EmployeePreference[] @relation("ApprovedBy")
  schedules           Schedule[]
  organization        Organization?        @relation(fields: [organizationId], references: [id])

  @@index([organizationId], map: "users_organization_id_fkey")
  @@map("users")
}

model Employee {
  id             Int                  @id @default(autoincrement())
  organizationId Int                  @map("organization_id")
  fullName       String               @map("full_name") @db.VarChar(255)
  position       EmployeePosition     @default(STAFF)
  employmentDate DateTime?            @map("employment_date") @db.Date
  phone          String?              @db.VarChar(20)
  email          String?              @db.VarChar(255)
  isActive       Boolean              @default(true) @map("is_active")
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")
  preferences    EmployeePreference[]
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  shifts         ScheduleShift[]
  statistics     ScheduleStatistic[]

  @@index([organizationId], map: "employees_organization_id_fkey")
  @@map("employees")
}

model Schedule {
  id             Int                 @id @default(autoincrement())
  organizationId Int                 @map("organization_id")
  name           String              @db.VarChar(255)
  year           Int
  month          Int
  targetHours    Int                 @map("target_hours")
  status         ScheduleStatus      @default(DRAFT)
  createdBy      Int?                @map("created_by")
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  version        Int                 @default(1)
  parentId       Int?                @map("parent_id")
  changes        String?             @db.Text
  shifts         ScheduleShift[]
  statistics     ScheduleStatistic[]
  creator        User?               @relation(fields: [createdBy], references: [id])
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent         Schedule?           @relation("ScheduleVersions", fields: [parentId], references: [id])
  versions       Schedule[]          @relation("ScheduleVersions")

  @@unique([organizationId, year, month, version], name: "unique_schedule_version")
  @@index([year, month], map: "idx_schedules_year_month")
  @@index([createdBy], map: "schedules_created_by_fkey")
  @@index([parentId], map: "schedules_parent_id_fkey")
  @@map("schedules")
}

model ScheduleShift {
  id         Int       @id @default(autoincrement())
  scheduleId Int       @map("schedule_id")
  employeeId Int       @map("employee_id")
  workDate   DateTime  @map("work_date") @db.Date
  shiftType  ShiftType @map("shift_type")
  startTime  DateTime? @map("start_time") @db.Time(0)
  endTime    DateTime? @map("end_time") @db.Time(0)
  hours      Decimal   @default(0.00) @db.Decimal(4, 2)
  location   Location  @default(OFFICE)
  notes      String?   @db.Text
  createdAt  DateTime  @default(now()) @map("created_at")
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  schedule   Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, employeeId, workDate], name: "unique_employee_date")
  @@index([workDate], map: "idx_schedule_shifts_date")
  @@index([employeeId], map: "schedule_shifts_employee_id_fkey")
  @@map("schedule_shifts")
}

model EmployeePreference {
  id             Int              @id @default(autoincrement())
  employeeId     Int              @map("employee_id")
  preferenceType PreferenceType   @map("preference_type")
  startDate      DateTime         @map("start_date") @db.Date
  endDate        DateTime         @map("end_date") @db.Date
  reason         String?          @db.Text
  status         PreferenceStatus @default(PENDING)
  approvedBy     Int?             @map("approved_by")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  approver       User?            @relation("ApprovedBy", fields: [approvedBy], references: [id])
  employee       Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([startDate, endDate], map: "idx_employee_preferences_dates")
  @@index([approvedBy], map: "employee_preferences_approved_by_fkey")
  @@index([employeeId], map: "employee_preferences_employee_id_fkey")
  @@map("employee_preferences")
}

model ShiftTemplate {
  id             Int          @id @default(autoincrement())
  organizationId Int          @map("organization_id")
  name           String       @db.VarChar(255)
  shiftType      String       @map("shift_type") @db.VarChar(50)
  startTime      DateTime     @map("start_time") @db.Time(0)
  endTime        DateTime     @map("end_time") @db.Time(0)
  hours          Decimal      @db.Decimal(4, 2)
  location       Location     @default(OFFICE)
  description    String?      @db.Text
  isActive       Boolean      @default(true) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId], map: "shift_templates_organization_id_fkey")
  @@map("shift_templates")
}

model ScheduleStatistic {
  id                 Int      @id @default(autoincrement())
  scheduleId         Int      @map("schedule_id")
  employeeId         Int      @map("employee_id")
  totalHours         Decimal  @default(0.00) @map("total_hours") @db.Decimal(6, 2)
  workDays           Int      @default(0) @map("work_days")
  offDays            Int      @default(0) @map("off_days")
  dutyShifts         Int      @default(0) @map("duty_shifts")
  weekendShifts      Int      @default(0) @map("weekend_shifts")
  vacationDays       Int      @default(0) @map("vacation_days")
  maxConsecutiveWork Int      @default(0) @map("max_consecutive_work")
  calculatedAt       DateTime @updatedAt @map("calculated_at")
  employee           Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  schedule           Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, employeeId], name: "unique_schedule_employee")
  @@index([employeeId], map: "schedule_statistics_employee_id_fkey")
  @@map("schedule_statistics")
}

enum UserRole {
  ADMIN
  MANAGER

  @@map("user_role")
}

enum EmployeePosition {
  SUPERVISOR
  STAFF

  @@map("employee_position")
}

enum ScheduleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED

  @@map("schedule_status")
}

enum ShiftType {
  DAY
  MONDAY_HOME
  MONDAY_DUTY_HOME
  DUTY_HOME
  WEEKEND
  FRIDAY
  PRE_HOLIDAY
  SUPERVISOR_DAY
  SUPERVISOR_FRIDAY
  SUPERVISOR_PRE_HOLIDAY
  OFF
  VACATION

  @@map("shift_type")
}

enum Location {
  OFFICE
  HOME

  @@map("location")
}

enum PreferenceType {
  VACATION
  NO_WEEKEND
  REMOTE_WORK
  SPECIFIC_SHIFT
  TIME_OFF

  @@map("preference_type")
}

enum PreferenceStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("preference_status")
}
